#include<stdio.h>
#include<stdlib.h>
#define N 100

typedef struct graph{
	int vertex; //정점
	struct graph *link;
} list;

list *gList[N]; //노드포인터 배열
int n; //그래프의 정점 개수

void addEdge(int v1, int v2){
	list *temp;

	temp = (list *) malloc(sizeof(list));
	temp -> vertex = v2;
	temp -> link = gList[v1];
	gList[v1] = temp;
	return;
}

void readGraph2(char *인접리스트){
	int i, j, v, w, edges, v1, v2;
	list *temp;
	FILE *fp = fopen(인접리스트, "r");

	if(fp == NULL) 
		return;
	fscanf(fp, "%d\n", &n);
	fscanf(fp, "%d\n", &edges);
	for(i = 0; i < edges; i++)
		gList[i] = NULL;
	for(i = 0; i < edges; i++){
		fscanf(fp, "%d %d", &v1, &v2);
		addEdge(v1, v2);
		addEdge(v2, v1);
	}
	fclose(fp);
	return;
}

//인접점 확인함수
int isAdjacent(int g[], int n, int i, int j){
	int k;
	if((i >= n) || (j >= n))
		return(-1);
	for(k = g[i]; k < g[i+1]; k++)
		if(g[k] == j)
			return(1);
	return(0);
}

int main(void){
	printf("%d", &gList);
}
